
7 segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000020e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000821  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bc  00000000  00000000  00000b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  00001201  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d1  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024a  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define SegThree 0x04
#define SegFour  0x08



int main() {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	62 97       	sbiw	r28, 0x12	; 18
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	char seg_code[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e};
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	int cnt, num, temp,i;

	/* Configure the ports as output */
	DDRB = 0xff; // Data lines
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff; // Control signal PORTD0-PORTD3
  c0:	8a b9       	out	0x0a, r24	; 10
		for (cnt = 0x00; cnt <= 9999; cnt++) // loop to display 0-9999
		{
			for (i = 0; i < 100; i++)
			{
				num = cnt;
				temp = num / 1000;
  c2:	0f 2e       	mov	r0, r31
  c4:	f8 ee       	ldi	r31, 0xE8	; 232
  c6:	ef 2e       	mov	r14, r31
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	ff 2e       	mov	r15, r31
  cc:	f0 2d       	mov	r31, r0
				num = num % 1000;
				PORTD = SegOne;
				PORTB = seg_code[temp];
				_delay_ms(1);

				temp = num / 100;
  ce:	0f 2e       	mov	r0, r31
  d0:	f4 e6       	ldi	r31, 0x64	; 100
  d2:	5f 2e       	mov	r5, r31
  d4:	f0 2d       	mov	r31, r0
  d6:	41 2c       	mov	r4, r1
				num = num % 100;
				PORTD = SegTwo;
				PORTB = seg_code[temp];
				_delay_ms(1);

				temp = num / 10;
  d8:	0f 2e       	mov	r0, r31
  da:	fa e0       	ldi	r31, 0x0A	; 10
  dc:	6f 2e       	mov	r6, r31
  de:	71 2c       	mov	r7, r1
  e0:	f0 2d       	mov	r31, r0
				num = num % 1000;
				PORTD = SegOne;
				PORTB = seg_code[temp];
				_delay_ms(1);

				temp = num / 100;
  e2:	35 2c       	mov	r3, r5
  e4:	24 2c       	mov	r2, r4
			for (i = 0; i < 100; i++)
			{
				num = cnt;
				temp = num / 1000;
				num = num % 1000;
				PORTD = SegOne;
  e6:	88 24       	eor	r8, r8
  e8:	83 94       	inc	r8
				PORTB = seg_code[temp];
				_delay_ms(1);

				temp = num / 100;
				num = num % 100;
				PORTD = SegTwo;
  ea:	68 94       	set
  ec:	99 24       	eor	r9, r9
  ee:	91 f8       	bld	r9, 1
				PORTB = seg_code[temp];
				_delay_ms(1);

				temp = num / 10;
				PORTD = SegThree;
  f0:	68 94       	set
  f2:	aa 24       	eor	r10, r10
  f4:	a2 f8       	bld	r10, 2
				PORTB = seg_code[temp];
				_delay_ms(1);

				temp = num % 10;
				PORTD = SegFour;
  f6:	68 94       	set
  f8:	bb 24       	eor	r11, r11
  fa:	b3 f8       	bld	r11, 3
	DDRB = 0xff; // Data lines
	DDRD = 0xff; // Control signal PORTD0-PORTD3

	while (1)
	{
		for (cnt = 0x00; cnt <= 9999; cnt++) // loop to display 0-9999
  fc:	00 e0       	ldi	r16, 0x00	; 0
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	31 c0       	rjmp	.+98     	; 0x164 <main+0xce>
			for (i = 0; i < 100; i++)
			{
				num = cnt;
				temp = num / 1000;
				num = num % 1000;
				PORTD = SegOne;
 102:	8b b8       	out	0x0b, r8	; 11
				PORTB = seg_code[temp];
 104:	6c 91       	ld	r22, X
 106:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x76>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x7c>
 112:	00 00       	nop
				_delay_ms(1);

				temp = num / 100;
				num = num % 100;
				PORTD = SegTwo;
 114:	9b b8       	out	0x0b, r9	; 11
				PORTB = seg_code[temp];
 116:	f6 01       	movw	r30, r12
 118:	60 81       	ld	r22, Z
 11a:	65 b9       	out	0x05, r22	; 5
 11c:	89 ef       	ldi	r24, 0xF9	; 249
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x8a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x90>
 126:	00 00       	nop
				_delay_ms(1);

				temp = num / 10;
				PORTD = SegThree;
 128:	ab b8       	out	0x0b, r10	; 11
				PORTB = seg_code[temp];
 12a:	fa 01       	movw	r30, r20
 12c:	60 81       	ld	r22, Z
 12e:	65 b9       	out	0x05, r22	; 5
 130:	89 ef       	ldi	r24, 0xF9	; 249
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x9e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xa4>
 13a:	00 00       	nop
				_delay_ms(1);

				temp = num % 10;
				PORTD = SegFour;
 13c:	bb b8       	out	0x0b, r11	; 11
				PORTB = seg_code[temp];
 13e:	e9 89       	ldd	r30, Y+17	; 0x11
 140:	fa 89       	ldd	r31, Y+18	; 0x12
 142:	60 81       	ld	r22, Z
 144:	65 b9       	out	0x05, r22	; 5
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0xb4>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xba>
 150:	00 00       	nop
 152:	21 50       	subi	r18, 0x01	; 1
 154:	31 09       	sbc	r19, r1

	while (1)
	{
		for (cnt = 0x00; cnt <= 9999; cnt++) // loop to display 0-9999
		{
			for (i = 0; i < 100; i++)
 156:	a9 f6       	brne	.-86     	; 0x102 <main+0x6c>
	DDRB = 0xff; // Data lines
	DDRD = 0xff; // Control signal PORTD0-PORTD3

	while (1)
	{
		for (cnt = 0x00; cnt <= 9999; cnt++) // loop to display 0-9999
 158:	0f 5f       	subi	r16, 0xFF	; 255
 15a:	1f 4f       	sbci	r17, 0xFF	; 255
 15c:	00 31       	cpi	r16, 0x10	; 16
 15e:	97 e2       	ldi	r25, 0x27	; 39
 160:	19 07       	cpc	r17, r25
 162:	61 f2       	breq	.-104    	; 0xfc <main+0x66>
		{
			for (i = 0; i < 100; i++)
			{
				num = cnt;
				temp = num / 1000;
 164:	c8 01       	movw	r24, r16
 166:	b7 01       	movw	r22, r14
 168:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__divmodhi4>
 16c:	6b 01       	movw	r12, r22
				num = num % 1000;
				PORTD = SegOne;
				PORTB = seg_code[temp];
				_delay_ms(1);

				temp = num / 100;
 16e:	65 2d       	mov	r22, r5
 170:	74 2d       	mov	r23, r4
 172:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__divmodhi4>
 176:	fb 01       	movw	r30, r22
				temp = num / 10;
				PORTD = SegThree;
				PORTB = seg_code[temp];
				_delay_ms(1);

				temp = num % 10;
 178:	b3 01       	movw	r22, r6
 17a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__divmodhi4>
 17e:	23 2d       	mov	r18, r3
 180:	32 2d       	mov	r19, r2
			{
				num = cnt;
				temp = num / 1000;
				num = num % 1000;
				PORTD = SegOne;
				PORTB = seg_code[temp];
 182:	a1 e0       	ldi	r26, 0x01	; 1
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ac 0f       	add	r26, r28
 188:	bd 1f       	adc	r27, r29
 18a:	ac 0d       	add	r26, r12
 18c:	bd 1d       	adc	r27, r13
				_delay_ms(1);

				temp = num / 100;
				num = num % 100;
				PORTD = SegTwo;
				PORTB = seg_code[temp];
 18e:	cc 24       	eor	r12, r12
 190:	c3 94       	inc	r12
 192:	d1 2c       	mov	r13, r1
 194:	cc 0e       	add	r12, r28
 196:	dd 1e       	adc	r13, r29
 198:	ce 0e       	add	r12, r30
 19a:	df 1e       	adc	r13, r31
				_delay_ms(1);

				temp = num / 10;
				PORTD = SegThree;
				PORTB = seg_code[temp];
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	4c 0f       	add	r20, r28
 1a2:	5d 1f       	adc	r21, r29
 1a4:	46 0f       	add	r20, r22
 1a6:	57 1f       	adc	r21, r23
				_delay_ms(1);

				temp = num % 10;
				PORTD = SegFour;
				PORTB = seg_code[temp];
 1a8:	e1 e0       	ldi	r30, 0x01	; 1
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ec 0f       	add	r30, r28
 1ae:	fd 1f       	adc	r31, r29
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	fa 8b       	std	Y+18, r31	; 0x12
 1b6:	e9 8b       	std	Y+17, r30	; 0x11
 1b8:	a4 cf       	rjmp	.-184    	; 0x102 <main+0x6c>

000001ba <__divmodhi4>:
 1ba:	97 fb       	bst	r25, 7
 1bc:	07 2e       	mov	r0, r23
 1be:	16 f4       	brtc	.+4      	; 0x1c4 <__divmodhi4+0xa>
 1c0:	00 94       	com	r0
 1c2:	07 d0       	rcall	.+14     	; 0x1d2 <__divmodhi4_neg1>
 1c4:	77 fd       	sbrc	r23, 7
 1c6:	09 d0       	rcall	.+18     	; 0x1da <__divmodhi4_neg2>
 1c8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__udivmodhi4>
 1cc:	07 fc       	sbrc	r0, 7
 1ce:	05 d0       	rcall	.+10     	; 0x1da <__divmodhi4_neg2>
 1d0:	3e f4       	brtc	.+14     	; 0x1e0 <__divmodhi4_exit>

000001d2 <__divmodhi4_neg1>:
 1d2:	90 95       	com	r25
 1d4:	81 95       	neg	r24
 1d6:	9f 4f       	sbci	r25, 0xFF	; 255
 1d8:	08 95       	ret

000001da <__divmodhi4_neg2>:
 1da:	70 95       	com	r23
 1dc:	61 95       	neg	r22
 1de:	7f 4f       	sbci	r23, 0xFF	; 255

000001e0 <__divmodhi4_exit>:
 1e0:	08 95       	ret

000001e2 <__udivmodhi4>:
 1e2:	aa 1b       	sub	r26, r26
 1e4:	bb 1b       	sub	r27, r27
 1e6:	51 e1       	ldi	r21, 0x11	; 17
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <__udivmodhi4_ep>

000001ea <__udivmodhi4_loop>:
 1ea:	aa 1f       	adc	r26, r26
 1ec:	bb 1f       	adc	r27, r27
 1ee:	a6 17       	cp	r26, r22
 1f0:	b7 07       	cpc	r27, r23
 1f2:	10 f0       	brcs	.+4      	; 0x1f8 <__udivmodhi4_ep>
 1f4:	a6 1b       	sub	r26, r22
 1f6:	b7 0b       	sbc	r27, r23

000001f8 <__udivmodhi4_ep>:
 1f8:	88 1f       	adc	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	5a 95       	dec	r21
 1fe:	a9 f7       	brne	.-22     	; 0x1ea <__udivmodhi4_loop>
 200:	80 95       	com	r24
 202:	90 95       	com	r25
 204:	bc 01       	movw	r22, r24
 206:	cd 01       	movw	r24, r26
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
